# -*- coding: utf-8 -*-
"""algo_back_testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12LAH1tYMfOJr98LWd-_Ijbi39Z3bWHVM

This function provides a backtesting standard method that i use to backtest all my strategies in python.
"""

def evaluate_trades_precisely(df):
    df['trade_result'] = 0
    # df['trade_duration'] = 0
    i = 0

    while i < len(df):
        if df['valid_cross'].iloc[i] == 1:  # Long trade signal
            entry_price = df['Close'].iloc[i]
            stop_loss = df['LowerStopLoss'].iloc[i]
            take_profit = df['UpperTakeProfit'].iloc[i]

            for j in range(i, len(df)):
                if df['Low'].iloc[j] <= stop_loss:
                    df.loc[df.index[i], 'trade_result'] = 3  # Stop loss hit
                    # df.loc[df.index[i], 'trade_duration'] = j - i
                    # i = j  # Move outer loop to this point
                    break
                elif df['High'].iloc[j] >= take_profit:
                    df.loc[df.index[i], 'trade_result'] = 1  # Take profit hit
                    # df.loc[df.index[i], 'trade_duration'] = j - i
                    # i = j  # Move outer loop to this point
                    break
            else:
                # Trade didn't conclude within available data
                df.loc[df.index[i], 'trade_result'] = -1
                # df.loc[df.index[i], 'trade_duration'] = len(df) - i - 1

        elif df['valid_cross'].iloc[i] == 2:  # Short trade signal
            entry_price = df['Close'].iloc[i]
            stop_loss = df['UpperStopLoss'].iloc[i]
            take_profit = df['LowerTakeProfit'].iloc[i]

            for j in range(i, len(df)):
                if df['High'].iloc[j] >= stop_loss:
                    df.loc[df.index[i], 'trade_result'] = 3  # Stop loss hit
                    # df.loc[df.index[i], 'trade_duration'] = j - i
                    # i = j  # Move outer loop to this point to avoid repeating trades
                    break
                elif df['Low'].iloc[j] <= take_profit:
                    df.loc[df.index[i], 'trade_result'] = 2  # Take profit hit
                    # df.loc[df.index[i], 'trade_duration'] = j - i
                    # i = j  # Move outer loop to this point to avoid repeating trades
                    break
            else:
                # Trade didn't conclude within available data
                df.loc[df.index[i], 'trade_result'] = -1
                # df.loc[df.index[i], 'trade_duration'] = len(df) - i - 1

        i += 1  # Move to next candle if no trade was initiated

    return df

# Assuming df is your dataframe with all the previous calculations
df = evaluate_trades_precisely(df)

# Display summary of trade results
print("Long trades won:", (df['trade_result'] == 1).sum())
print("Short trades won:", (df['trade_result'] == 2).sum())
# print("Total Signals Given: ", trades)
print("Trades lost:", (df['trade_result'] == 3).sum())
print("Unconcluded trades:", (df['trade_result'] == -1).sum())

# Calculate win rate
total_concluded_trades = ((df['trade_result'] == 1) | (df['trade_result'] == 2) | (df['trade_result'] == 3)).sum()
winning_trades = (df['trade_result'] == 1).sum() + (df['trade_result'] == 2).sum()
win_rate = winning_trades / total_concluded_trades if total_concluded_trades > 0 else 0
print("Total Signals Taken: ", total_concluded_trades)
print(f"Win rate: {win_rate:.2%}")

# Average trade duration
# avg_duration = df[df['trade_duration'] > 0]['trade_duration'].mean()
# print(f"Average trade duration: {avg_duration:.2f} candles")

